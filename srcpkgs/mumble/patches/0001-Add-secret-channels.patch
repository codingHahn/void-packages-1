From a6856bfb456b8abd583938c84d16b7b5f3a8a430 Mon Sep 17 00:00:00 2001
From: Jonas Herzig <me@johni0702.de>
Date: Mon, 1 Jan 2018 17:24:42 +0100
Subject: [PATCH] Add secret channels

---
 src/Channel.cpp         |  8 ++++++
 src/Channel.h           |  3 +++
 src/murmur/Messages.cpp | 45 ++++++++++++++++++++--------------
 src/murmur/RPC.cpp      | 14 ++++++-----
 src/murmur/Server.cpp   | 54 +++++++++++++++++++++++++++++++++++------
 src/murmur/Server.h     |  2 +-
 6 files changed, 94 insertions(+), 32 deletions(-)

diff --git src/Channel.cpp src/Channel.cpp
index 6c2f2895..99cd0b3d 100644
--- src/Channel.cpp
+++ src/Channel.cpp
@@ -83,6 +83,14 @@ bool Channel::lessThan(const Channel *first, const Channel *second) {
 		return QString::localeAwareCompare(first->qsName, second->qsName) < 0;
 }
 
+bool Channel::isSecret() {
+	return qhGroups.contains(QLatin1String("members hidden"));
+}
+
+Channel* Channel::getSecretLinked() {
+	return qsPermLinks.isEmpty() || !isSecret() ? this : *qsPermLinks.begin();
+}
+
 bool Channel::isLinked(Channel *l) const {
 	return ((l == this) || qhLinks.contains(l));
 }
diff --git src/Channel.h src/Channel.h
index a0f84687..f89a293a 100644
--- src/Channel.h
+++ src/Channel.h
@@ -76,6 +76,9 @@ class Channel : public QObject {
 		void addUser(User *p);
 		void removeUser(User *p);
 
+		bool isSecret();
+		Channel *getSecretLinked();
+
 		bool isLinked(Channel *c) const;
 		void link(Channel *c);
 		void unlink(Channel *c = NULL);
diff --git src/murmur/Messages.cpp src/murmur/Messages.cpp
index d43805c6..65f3cef0 100644
--- src/murmur/Messages.cpp
+++ src/murmur/Messages.cpp
@@ -283,8 +283,6 @@ void Server::msgAuthenticate(ServerUser *uSource, MumbleProto::Authenticate &msg
 	// Transmit user profile
 	MumbleProto::UserState mpus;
 
-	userEnterChannel(uSource, lc, mpus);
-
 	{
 		QWriteLocker wl(&qrwlVoiceThread);
 		uSource->sState = ServerUser::Authenticated;
@@ -313,8 +311,9 @@ void Server::msgAuthenticate(ServerUser *uSource, MumbleProto::Authenticate &msg
 	}
 	if (! uSource->qsHash.isEmpty())
 		mpus.set_hash(u8(uSource->qsHash));
-	if (uSource->cChannel->iId != 0)
-		mpus.set_channel_id(uSource->cChannel->iId);
+
+	if (lc->iId != 0 || lc->isSecret())
+		mpus.set_channel_id(lc->getSecretLinked()->iId);
 
 	sendAll(mpus, 0x010202);
 
@@ -324,6 +323,17 @@ void Server::msgAuthenticate(ServerUser *uSource, MumbleProto::Authenticate &msg
 		mpus.set_comment(u8(uSource->qsComment));
 	sendAll(mpus, ~ 0x010202);
 
+	if (lc->isSecret()) {
+		mpus.Clear();
+		mpus.set_session(uSource->uiSession);
+		mpus.set_channel_id(lc->iId);
+		foreach(User *u, lc->qlUsers) {
+			sendMessage(static_cast<ServerUser *>(u), mpus);
+		}
+	}
+
+	userEnterChannel(uSource, lc, uSource);
+
 	// Transmit other users profiles
 	foreach(ServerUser *u, qhUsers) {
 		if (u->sState != ServerUser::Authenticated)
@@ -346,7 +356,7 @@ void Server::msgAuthenticate(ServerUser *uSource, MumbleProto::Authenticate &msg
 			mpus.set_texture(blob(u->qbaTexture));
 		}
 		if (u->cChannel->iId != 0)
-			mpus.set_channel_id(u->cChannel->iId);
+			mpus.set_channel_id((lc == u->cChannel ? lc : u->cChannel->getSecretLinked())->iId);
 		if (u->bDeaf)
 			mpus.set_deaf(true);
 		else if (u->bMute)
@@ -727,14 +737,6 @@ void Server::msgUserState(ServerUser *uSource, MumbleProto::UserState &msg) {
 		bBroadcast = true;
 	}
 
-	if (msg.has_channel_id()) {
-		Channel *c = qhChannels.value(msg.channel_id());
-
-		userEnterChannel(pDstServerUser, c, msg);
-		log(uSource, QString("Moved %1 to %2").arg(QString(*pDstServerUser), QString(*c)));
-		bBroadcast = true;
-	}
-
 	bool bDstAclChanged = false;
 	if (msg.has_user_id()) {
 		// Handle user (Self-)Registration
@@ -757,6 +759,10 @@ void Server::msgUserState(ServerUser *uSource, MumbleProto::UserState &msg) {
 		bBroadcast = true;
 	}
 
+	bool hasChannelId = msg.has_channel_id();
+	unsigned int channelId = hasChannelId ? msg.channel_id() : 0;
+	msg.clear_channel_id();
+
 	if (bBroadcast) {
 		// Texture handling for clients < 1.2.2.
 		// Send the texture data in the message.
@@ -788,6 +794,13 @@ void Server::msgUserState(ServerUser *uSource, MumbleProto::UserState &msg) {
 			clearACLCache(pDstServerUser);
 	}
 
+	if (hasChannelId) {
+		Channel *c = qhChannels.value(channelId);
+
+		userEnterChannel(pDstServerUser, c, uSource);
+		log(uSource, QString("Moved %1 to %2").arg(QString(*pDstServerUser), QString(*c)));
+	}
+
 	emit userStateChanged(pDstServerUser);
 }
 
@@ -964,11 +977,7 @@ void Server::msgChannelState(ServerUser *uSource, MumbleProto::ChannelState &msg
 
 		if (c->bTemporary) {
 			// If a temporary channel has been created move the creator right in there
-			MumbleProto::UserState mpus;
-			mpus.set_session(uSource->uiSession);
-			mpus.set_channel_id(c->iId);
-			userEnterChannel(uSource, c, mpus);
-			sendAll(mpus);
+			userEnterChannel(uSource, c, NULL);
 			emit userStateChanged(uSource);
 		}
 	} else {
diff --git src/murmur/RPC.cpp src/murmur/RPC.cpp
index ff62bad9..1c74a69b 100644
--- src/murmur/RPC.cpp
+++ src/murmur/RPC.cpp
@@ -64,12 +64,6 @@ void Server::setUserState(User *pUser, Channel *cChannel, bool mute, bool deaf,
 	pUser->qsName = name;
 	hashAssign(pUser->qsComment, pUser->qbaCommentHash, comment);
 
-	if (cChannel != pUser->cChannel) {
-		changed = true;
-		mpus.set_channel_id(cChannel->iId);
-		userEnterChannel(pUser, cChannel, mpus);
-	}
-
 	if (changed) {
 		sendAll(mpus, ~ 0x010202);
 		if (mpus.has_comment() && ! pUser->qbaCommentHash.isEmpty()) {
@@ -77,7 +71,15 @@ void Server::setUserState(User *pUser, Channel *cChannel, bool mute, bool deaf,
 			mpus.set_comment_hash(blob(pUser->qbaCommentHash));
 		}
 		sendAll(mpus, 0x010202);
+	}
 
+	if (cChannel != pUser->cChannel) {
+		changed = true;
+
+		userEnterChannel(pUser, cChannel, NULL);
+	}
+
+	if (changed) {
 		emit userStateChanged(pUser);
 	}
 }
diff --git src/murmur/Server.cpp src/murmur/Server.cpp
index dc5d3714..e0ba39bd 100644
--- src/murmur/Server.cpp
+++ src/murmur/Server.cpp
@@ -1647,11 +1647,7 @@ void Server::removeChannel(Channel *chan, Channel *dest) {
 		while (target->cParent && (! hasPermission(static_cast<ServerUser *>(p), target, ChanACL::Enter) || isChannelFull(target, static_cast<ServerUser *>(p))))
 			target = target->cParent;
 
-		MumbleProto::UserState mpus;
-		mpus.set_session(p->uiSession);
-		mpus.set_channel_id(target->iId);
-		userEnterChannel(p, target, mpus);
-		sendAll(mpus);
+		userEnterChannel(p, target, NULL);
 		emit userStateChanged(p);
 	}
 
@@ -1712,10 +1708,19 @@ bool Server::unregisterUser(int id) {
 	return true;
 }
 
-void Server::userEnterChannel(User *p, Channel *c, MumbleProto::UserState &mpus) {
+void Server::userEnterChannel(User *p, Channel *c, User *actor) {
 	if (p->cChannel == c)
 		return;
 
+
+	Channel *srcChannel = p->cChannel;
+	Channel *dstChannel = c;
+
+	MumbleProto::UserState realMove;
+	realMove.set_session(p->uiSession);
+	if (actor) realMove.set_actor(actor->uiSession);
+	realMove.set_channel_id(dstChannel->iId);
+
 	Channel *old = p->cChannel;
 
 	{
@@ -1728,7 +1733,7 @@ void Server::userEnterChannel(User *p, Channel *c, MumbleProto::UserState &mpus)
 		if (mayspeak == sup) {
 			// Ok, he can speak and was suppressed, or vice versa
 			p->bSuppress = ! mayspeak;
-			mpus.set_suppress(p->bSuppress);
+			realMove.set_suppress(p->bSuppress);
 		}
 	}
 
@@ -1742,6 +1747,41 @@ void Server::userEnterChannel(User *p, Channel *c, MumbleProto::UserState &mpus)
 	sendClientPermission(static_cast<ServerUser *>(p), c);
 	if (c->cParent)
 		sendClientPermission(static_cast<ServerUser *>(p), c->cParent);
+
+	bool srcSecret = srcChannel && srcChannel->isSecret();
+	bool dstSecret = dstChannel->isSecret();
+	if (dstSecret || srcSecret) {
+		MumbleProto::UserState fakeMove;
+		fakeMove.set_session(p->uiSession);
+		if (actor) fakeMove.set_actor(actor->uiSession);
+		fakeMove.set_channel_id(dstChannel->getSecretLinked()->iId);
+
+		foreach(ServerUser *u, qhUsers) {
+			if (dstSecret && u->cChannel == dstChannel) {
+				sendMessage(u, realMove);
+			} else {
+				sendMessage(u, fakeMove);
+			}
+		}
+		if (dstSecret) {
+			MumbleProto::UserState other;
+			other.set_channel_id(dstChannel->iId);
+			foreach(User *u, dstChannel->qlUsers) {
+				other.set_session(u->uiSession);
+				sendMessage(static_cast<ServerUser *>(p), other);
+			}
+		}
+		if (srcSecret) {
+			MumbleProto::UserState other;
+			other.set_channel_id(srcChannel->getSecretLinked()->iId);
+			foreach(User *u, srcChannel->qlUsers) {
+				other.set_session(u->uiSession);
+				sendMessage(static_cast<ServerUser *>(p), other);
+			}
+		}
+	} else {
+		sendAll(realMove);
+	}
 }
 
 bool Server::hasPermission(ServerUser *p, Channel *c, QFlags<ChanACL::Perm> perm) {
diff --git src/murmur/Server.h src/murmur/Server.h
index 007532b7..e545920a 100644
--- src/murmur/Server.h
+++ src/murmur/Server.h
@@ -322,7 +322,7 @@ class Server : public QThread {
 
 		void removeChannel(int id);
 		void removeChannel(Channel *c, Channel *dest = NULL);
-		void userEnterChannel(User *u, Channel *c, MumbleProto::UserState &mpus);
+		void userEnterChannel(User *u, Channel *c, User *actor);
 		bool unregisterUser(int id);
 
 		Server(int snum, QObject *parent = NULL);
-- 
2.27.0

